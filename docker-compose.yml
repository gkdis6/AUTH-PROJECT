# docker-compose.yml
version: '3.8'

services:
  # --- PostgreSQL Database ---
  db:
    image: postgres:15-alpine
    container_name: auth_db
    restart: unless-stopped # 서버 재시작 시 DB도 자동 재시작 (선택 사항)
    environment:
      # 루트 .env 파일 또는 환경 변수에서 읽어옴
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      # 호스트 포트:컨테이너 포트 매핑
      - "${DATABASE_PORT:-15432}:5432" # .env 없으면 호스트 15432 사용
    volumes:
      - postgres_data:/var/lib/postgresql/data # 데이터 영속화
    networks:
      - auth_network

  # --- Backend Service (NestJS) ---
  backend:
    image: node:18-alpine # Dockerfile 대신 기본 Node 이미지 사용
    container_name: auth_backend
    restart: unless-stopped
    working_dir: /usr/src/app # 컨테이너 작업 디렉토리
    ports:
      - "3000:3000" # 호스트 3000 -> 컨테이너 3000
    depends_on:
      - db
    environment:
      # .env 파일 값들을 여기에 직접 전달하거나,
      # docker-compose가 읽을 루트 .env 파일 사용 (.env_file 옵션도 가능)
      DATABASE_URL: postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_TIME: ${JWT_EXPIRATION_TIME}
      JWT_EXPIRATION_TIME_MS: ${JWT_EXPIRATION_TIME_MS}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      REFRESH_TOKEN_EXPIRATION_TIME: ${REFRESH_TOKEN_EXPIRATION_TIME}
      JWT_REFRESH_EXPIRATION_TIME_MS: ${JWT_REFRESH_EXPIRATION_TIME_MS}
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000 # 컨테이너 내부 포트
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3001}
    volumes:
      # 호스트의 backend 디렉토리를 컨테이너의 작업 디렉토리로 마운트
      - ./backend:/usr/src/app
      # node_modules는 컨테이너별로 관리하기 위해 호스트와 공유하지 않음 (일반적)
      # 필요시 /usr/src/app/node_modules 를 명시적 볼륨으로 지정 가능
    networks:
      - auth_network
    # 컨테이너 실행 시 실행할 명령: 의존성 설치 및 개발 서버 실행
    # 주의: 매번 실행 시 npm install 하므로 초기 실행이 느릴 수 있음
    #      개선: docker exec로 들어가서 직접 install 하거나, 볼륨을 영리하게 사용
    command: sh -c "npm install && npm run start:dev"

  # --- Frontend Service (Next.js) ---
  frontend:
    image: node:18-alpine # Dockerfile 대신 기본 Node 이미지 사용
    container_name: auth_frontend
    restart: unless-stopped
    working_dir: /usr/src/app
    ports:
      - "3001:3001" # 호스트 3001 -> 컨테이너 3001
    depends_on:
      - backend
    environment:
      PORT: 3001 # 컨테이너 내부 포트
      NEXT_PUBLIC_API_URL: http://localhost:3000 # 브라우저에서 접근할 백엔드 주소
      # NODE_ENV: development # 필요시 설정
    volumes:
      # 호스트의 frontend 디렉토리를 컨테이너의 작업 디렉토리로 마운트
      - ./frontend:/usr/src/app
      # node_modules는 컨테이너별로 관리
      # .next 폴더도 마운트하면 개발 중 빌드 캐시 유지에 도움될 수 있음
      - /usr/src/app/.next
    networks:
      - auth_network
    # 컨테이너 실행 시 실행할 명령
    command: sh -c "npm install && npm run dev -- -p 3001" # next dev 가 PORT 환경변수를 항상 따르지 않을 수 있으므로 -p 추가

# --- Volumes ---
volumes:
  postgres_data:
    driver: local

# --- Networks ---
networks:
  auth_network:
    driver: bridge
